Path COMMON;

CREATE COMPUTE MODULE Test_ISO_Trnmsgs_ApllyRules
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		



		
		 CALL CopyEntireMessage();
		 
		
		SET  Environment.ISO.PCREF = createPCREF();
		DECLARE ISOMSG REFERENCE TO InputBody.ns:ISO8583_1993;
		
		SET Environment.ISO.Field041 = ISOMSG.CardAcceptorTerminalIdentification_041;
		SET Environment.ISO.AccountIdentification1_102 = ISOMSG.AccountIdentification1_102;
		
		SET Environment.ISO.RetrievalReferenceNumber_037 = ISOMSG.RetrievalReferenceNumber_037;
		
		
		 
		
		SET Environment.ISO.MTI = CAST(ISOMSG.MTI_MessageClass * 100 + ISOMSG.MTI_MessageFunction * 10 + ISOMSG.MTI_MessageOrigin AS CHAR);
		SET Environment.HOLD.GZBRNM = 'TEST';
		SET Environment.HOLD.RPYQUEUE = 'ESB.HOLD.RESP.QUEUE';
		SET Environment.HOLD.RPYQUEUE = 'ESB.HOLD.BAL.QUEUE'; 
		--SET Environment.HOLD.Amount = '';
		SET Environment.HOLD.Acquirer = '1';
		SET Environment.HOLD.Amount =ISOMSG.AmountReconciliation_005;
		IF (Environment.HOLD.Amount IS NULL) THEN 
			SET Environment.HOLD.Amount = ISOMSG.AmountTransaction_004;
		END IF;	
		
		 
		RETURN TRUE;
	END;
	
	
	
	

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
