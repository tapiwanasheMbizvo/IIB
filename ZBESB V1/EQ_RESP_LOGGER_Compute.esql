

CREATE COMPUTE MODULE EQ_RESP_LOGGER_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		
		
		SET Environment.DB_VALUES.PCREF = CAST (InputBody.TRANSACTIONRSP.TRANSACTION_RSP_HEADER.PCREF AS CHAR);
		SET Environment.DB_VALUES.MSGTYPE = CAST (InputBody.TRANSACTIONRSP.TRANSACTION_RSP_HEADER.MSGTYPE AS CHAR);
		SET Environment.DB_VALUES.GROUPID = Environment.DB_VALUES.MSGTYPE||Environment.DB_VALUES.PCREF;		
		SET Environment.DB_VALUES.ID = THE(SELECT ITEM E.ID FROM Database.ZBDB_ESB.DB2INST1.EQTRANSFER AS E WHERE E.PCREF = Environment.DB_VALUES.PCREF);
		
		
		SET Environment.DB_VALUES.XRREC =CAST (InputBody.TRANSACTIONRSP.TRANSACTION_RSP_HEADER.XRREC AS CHAR);
		SET Environment.DB_VALUES.MsgTxt =CAST (InputBody.TRANSACTIONRSP.TRANSACTION_RSP_HEADER.MsgTxt AS CHAR);
		SET Environment.DB_VALUES.UserData =CAST (InputBody.TRANSACTIONRSP.TRANSACTION_RSP_HEADER.UserData AS CHAR);
		
		IF Environment.DB_VALUES.ID IS NOT NULL THEN 
			--lets update
			CALL updateEQMessage();
		ELSE
			--this response has no macthing request 
		END IF ;		

		RETURN TRUE;
	END;


	CREATE PROCEDURE updateEQMessage() BEGIN
		
		
		UPDATE Database.ZBDB_ESB.DB2INST1.EQTRANSFER  
		
		SET  XRREC = Environment.DB_VALUES.XRREC,
		 	 MSGTXT = Environment.DB_VALUES.MsgTxt,
		 	 USERDATA =Environment.DB_VALUES.UserData
		WHERE EQTRANSFER.ID = Environment.DB_VALUES.ID;	
			
		
	END;
	
			
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
