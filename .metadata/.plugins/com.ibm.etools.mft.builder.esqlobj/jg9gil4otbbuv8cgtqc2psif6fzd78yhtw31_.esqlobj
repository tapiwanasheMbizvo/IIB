CREATE COMPUTE MODULE EQ_HOLDREQ_LOGGER
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		 
		 
		 --EXTRACT PCREF TO SEE IF THE MESSAGE HAS BEEN SAVED BEFORE
		SET Environment.DB_VALUES.PCREF = CAST (InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.PCREF AS CHAR);
		
		
		IF Environment.DB_VALUES.PCREF IS NULL THEN
			
			CALL saveHoldRequest();
			
		END IF;
		 
		 
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE saveHoldRequest() BEGIN
		
		INSERT INTO Database.ZBDB_ESB.DB2INST1.EQHOLD(
		
			GZACO,
			GZAMTH,
			GZBBN,
			GZBNO,
			GZBRNM,
			GZCCY,
			GZCLC,
			GZCUS,
			GZDLM,
			GZEXD,
			GZHDD1,
			GZHDD2,
			GZHDD3,
			GZHDD4,
			GZHNO,
			GZHRC,
			GZINP,
			GZSFX,
			GZSTD,
			DATERECEIVED,
			GROUPREFERENCE,
			NARRATIVE,
			RESPONSECODE,
			BRNM,
			FORMAT,
			JTT,
			MAPLOCN,
			MSGTYPE,
			NMSGS,
			ORIGIN,
			ORIGTYPE,
			PCREF,
			PASSWORD,
			REPLY,
			REPLYMSG,
			RESPMODE,
			RPGM,
			RPYQUEUE,
			SPAREA,
			SPAREB,
			SRCSYS,
			TGTSYS,
			TRANSQ,
			TSTAMP,
			USER,
			USID,
			VERSION,
			WARNS,
			WSID,
			DRV
				
		)
		 VALUES (
		 
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZACO,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZAMTH,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZBBN,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZBNO,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZBRNM,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZCCY,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZCLC,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZCUS,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZDLM,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZEXD,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZHDD1,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZHDD2,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZHDD3,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZHDD4,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZHNO,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZHRC,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZINP,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZSFX,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_BODY.GZSTD,
		 '2018-11-13 15:10:14',
		 '1',
		 '2',
		 '3',	 
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.BRNM,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.FORMAT,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.JTT,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.MAPLOCN,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.MSGTYPE,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.NMSGS,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.ORIGIN,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.ORIGTYPE,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.PCREF,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.PASSWRD,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.REPLY,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.REPLYMSG,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.RESPMODE,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.RPGM,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.RPYQUEUE,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.SPAREA,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.SPAREB,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.SRCSYS,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.TGTSYS,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.TRANSQ,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.TSTAMP,		 
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.USER,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.USID,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.VERSION,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.WARNS,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.WSID,
		 InputBody.EQHOLDREQ.EQHOLD_REQ_HEADER.DRV
		 );
		 
		END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;